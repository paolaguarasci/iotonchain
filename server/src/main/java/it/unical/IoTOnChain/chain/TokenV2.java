package it.unical.IoTOnChain.chain;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.0.
 */
@SuppressWarnings("rawtypes")
public class TokenV2 extends Contract {
  public static final String BINARY = "0x60806040523480156200001157600080fd5b5060405162004e8c38038062004e8c83398181016040528101906200003791906200036a565b33816200004a81620000fc60201b60201c565b506000600360006101000a81548160ff0219169083151502179055506001600481905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000e35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000da919062000400565b60405180910390fd5b620000f4816200011160201b60201c565b50506200074f565b80600290816200010d919062000668565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024082620001f5565b810181811067ffffffffffffffff8211171562000262576200026162000206565b5b80604052505050565b600062000277620001d7565b905062000285828262000235565b919050565b600067ffffffffffffffff821115620002a857620002a762000206565b5b620002b382620001f5565b9050602081019050919050565b60005b83811015620002e0578082015181840152602081019050620002c3565b60008484015250505050565b600062000303620002fd846200028a565b6200026b565b905082815260208101848484011115620003225762000321620001f0565b5b6200032f848285620002c0565b509392505050565b600082601f8301126200034f576200034e620001eb565b5b815162000361848260208601620002ec565b91505092915050565b600060208284031215620003835762000382620001e1565b5b600082015167ffffffffffffffff811115620003a457620003a3620001e6565b5b620003b28482850162000337565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003e882620003bb565b9050919050565b620003fa81620003db565b82525050565b6000602082019050620004176000830184620003ef565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047057607f821691505b60208210810362000486576200048562000428565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004f07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004b1565b620004fc8683620004b1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000549620005436200053d8462000514565b6200051e565b62000514565b9050919050565b6000819050919050565b620005658362000528565b6200057d620005748262000550565b848454620004be565b825550505050565b600090565b6200059462000585565b620005a18184846200055a565b505050565b5b81811015620005c957620005bd6000826200058a565b600181019050620005a7565b5050565b601f8211156200061857620005e2816200048c565b620005ed84620004a1565b81016020851015620005fd578190505b620006156200060c85620004a1565b830182620005a6565b50505b505050565b600082821c905092915050565b60006200063d600019846008026200061d565b1980831691505092915050565b60006200065883836200062a565b9150826002028217905092915050565b62000673826200041d565b67ffffffffffffffff8111156200068f576200068e62000206565b5b6200069b825462000457565b620006a8828285620005cd565b600060209050601f831160018114620006e05760008415620006cb578287015190505b620006d785826200064a565b86555062000747565b601f198416620006f0866200048c565b60005b828110156200071a57848901518255600182019150602085019450602081019050620006f3565b868310156200073a578489015162000736601f8916826200062a565b8355505b6001600288020188555050505b505050505050565b61472d806200075f6000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c80636b20c45411610104578063b63e56de116100a2578063f23a6e6111610071578063f23a6e6114610517578063f242432a14610547578063f2fde38b14610563578063f5298aca1461057f576101ce565b8063b63e56de1461047d578063bc197c811461049b578063e943382f146104cb578063e985e9c5146104e7576101ce565b80638da5cb5b116100de5780638da5cb5b146103f7578063922ed09714610415578063a22cb46514610445578063b37db15814610461576101ce565b80636b20c454146103c7578063715018a6146103e35780638456cb59146103ed576101ce565b80632c48e7db116101715780634e1273f41161014b5780634e1273f41461032957806359caecb5146103595780635c975abb146103755780636577b86a14610393576101ce565b80632c48e7db146102e75780632eb2c2d6146103035780633f4ba83a1461031f576101ce565b80630e89341c116101ad5780630e89341c1461024f5780631e71e5421461027f5780631f276b6e146102af5780631f7fdffa146102cb576101ce565b8062fdd58e146101d357806301ffc9a71461020357806302fe530514610233575b600080fd5b6101ed60048036038101906101e89190612cf7565b61059b565b6040516101fa9190612d46565b60405180910390f35b61021d60048036038101906102189190612db9565b6105f5565b60405161022a9190612e01565b60405180910390f35b61024d60048036038101906102489190612f62565b610617565b005b61026960048036038101906102649190612fab565b61062b565b6040516102769190613057565b60405180910390f35b61029960048036038101906102949190613196565b6106bf565b6040516102a69190613234565b60405180910390f35b6102c960048036038101906102c49190613256565b61072b565b005b6102e560048036038101906102e091906133fa565b6107b6565b005b61030160048036038101906102fc9190612fab565b6107d0565b005b61031d600480360381019061031891906134b5565b610ad8565b005b610327610b80565b005b610343600480360381019061033e9190613647565b610b92565b604051610350919061377d565b60405180910390f35b610373600480360381019061036e9190612fab565b610c9b565b005b61037d610f32565b60405161038a9190612e01565b60405180910390f35b6103ad60048036038101906103a89190612fab565b610f49565b6040516103be9594939291906137ae565b60405180910390f35b6103e160048036038101906103dc9190613801565b610fcc565b005b6103eb611078565b005b6103f561108c565b005b6103ff61109e565b60405161040c919061388c565b60405180910390f35b61042f600480360381019061042a91906138a7565b6110c8565b60405161043c91906139ce565b60405180910390f35b61045f600480360381019061045a9190613a1c565b611267565b005b61047b60048036038101906104769190613a5c565b61127d565b005b6104856113ad565b6040516104929190612d46565b60405180910390f35b6104b560048036038101906104b091906134b5565b6113b3565b6040516104c29190613aee565b60405180910390f35b6104e560048036038101906104e09190613b09565b6113c8565b005b61050160048036038101906104fc9190613b5c565b611666565b60405161050e9190612e01565b60405180910390f35b610531600480360381019061052c9190613b9c565b6116fa565b60405161053e9190613aee565b60405180910390f35b610561600480360381019061055c9190613b9c565b61170f565b005b61057d60048036038101906105789190613c33565b6117b7565b005b61059960048036038101906105949190613b09565b61183d565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610600826118e9565b80610610575061060f826119cb565b5b9050919050565b61061f611a45565b61062881611acc565b50565b60606002805461063a90613c8f565b80601f016020809104026020016040519081016040528092919081815260200182805461066690613c8f565b80156106b35780601f10610688576101008083540402835291602001916106b3565b820191906000526020600020905b81548152906001019060200180831161069657829003601f168201915b50505050509050919050565b60608060005b835181101561072157816106f28583815181106106e5576106e4613cc0565b5b6020026020010151611adf565b604051602001610703929190613d2b565b604051602081830303815290604052915080806001019150506106c5565b5080915050919050565b610733611a45565b61073b611b12565b80610746308461059b565b1015610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077e90613d9b565b60405180910390fd5b6107aa3061079361109e565b848460405180602001604052806000815250611b58565b6107b2611c63565b5050565b6107be611a45565b6107ca84848484611c6d565b50505050565b6107d8611b12565b60006006600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087890613e2d565b60405180910390fd5b8060040160009054906101000a900460ff16156108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca90613e99565b60405180910390fd5b80600301546108e630836002015461059b565b1015610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90613d9b565b60405180910390fd5b60018160040160006101000a81548160ff02191690831515021790555061098c308260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154846003015460405180602001604052806000815250611b58565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16837fa3396d4d18975c306da5934c6bbc584ddec82509b4ddcbea22a05181e6c02cdb84600201548560030154604051610a3c929190613eb9565b60405180910390a460066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff0219169055505050610ad5611c63565b50565b6000610ae2611cf3565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015610b275750610b258682611666565b155b15610b6b5780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610b62929190613ee2565b60405180910390fd5b610b788686868686611cfb565b505050505050565b610b88611a45565b610b90611df3565b565b60608151835114610bde57815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610bd5929190613eb9565b60405180910390fd5b6000835167ffffffffffffffff811115610bfb57610bfa612e37565b5b604051908082528060200260200182016040528015610c295781602001602082028036833780820191505090505b50905060005b8451811015610c9057610c66610c4e8287611e5690919063ffffffff16565b610c618387611e6a90919063ffffffff16565b61059b565b828281518110610c7957610c78613cc0565b5b602002602001018181525050806001019050610c2f565b508091505092915050565b610ca3611b12565b60006006600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4390613f7d565b60405180910390fd5b8060040160009054906101000a900460ff1615610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d959061400f565b60405180910390fd5b610de6308260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154846003015460405180602001604052806000815250611b58565b60066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff021916905550508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16837faee0578132f4070c955f7060e0fdaf4544a2a622381d31c93ae29cc7676b7b6184600201548560030154604051610f1e929190613eb9565b60405180910390a450610f2f611c63565b50565b6000600360009054906101000a900460ff16905090565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b610fd4611cf3565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561101d575061101b83611016611cf3565b611666565b155b156110685761102a611cf3565b836040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161105f929190613ee2565b60405180910390fd5b611073838383611e7e565b505050565b611080611a45565b61108a6000611f12565b565b611094611a45565b61109c611fd8565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000604083516110da919061408d565b905060008167ffffffffffffffff8111156110f8576110f7612e37565b5b60405190808252806020026020018201604052801561113157816020015b61111e612c35565b8152602001906001900390816111165790505b5090506000805b8381101561125b576000604067ffffffffffffffff81111561115d5761115c612e37565b5b6040519080825280601f01601f19166020018201604052801561118f5781602001600182028036833780820191505090505b50905060005b8151811015611216578781856111ab91906140be565b815181106111bc576111bb613cc0565b5b602001015160f81c60f81b8282815181106111da576111d9613cc0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611195565b506112208161203b565b84838151811061123357611232613cc0565b5b602002602001018190525080518361124b91906140be565b9250508080600101915050611138565b50819350505050919050565b611279611272611cf3565b838361207c565b5050565b611285611a45565b6000815111156113935760005b8151811015611330578181815181106112ae576112ad613cc0565b5b6020026020010151602001516112e2868484815181106112d1576112d0613cc0565b5b60200260200101516000015161059b565b1015611323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131a90614164565b60405180910390fd5b8080600101915050611292565b5060005b8151811015611391576113848583838151811061135457611353613cc0565b5b60200260200101516000015184848151811061137357611372613cc0565b5b6020026020010151602001516121ec565b8080600101915050611334565b505b6113a78484846113a2856106bf565b612293565b50505050565b60075481565b600063bc197c8160e01b905095945050505050565b6113d0611b12565b806113db338461059b565b101561141c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611413906141d0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361148b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114829061423c565b60405180910390fd5b6007600081548092919061149e9061425c565b91905055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020016000151581525060066000600754815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050506115ef3330848460405180602001604052806000815250611b58565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff166007547f49a3984deac28c36751508cd5d17f3738cc0cb85a1ab1febd264775c167714498585604051611651929190613eb9565b60405180910390a4611661611c63565b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600063f23a6e6160e01b905095945050505050565b6000611719611cf3565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415801561175e575061175c8682611666565b155b156117a25780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611799929190613ee2565b60405180910390fd5b6117af8686868686611b58565b505050505050565b6117bf611a45565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118315760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611828919061388c565b60405180910390fd5b61183a81611f12565b50565b611845611cf3565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561188e575061188c83611887611cf3565b611666565b155b156118d95761189b611cf3565b836040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016118d0929190613ee2565b60405180910390fd5b6118e48383836121ec565b505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119b457507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806119c457506119c38261232c565b5b9050919050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611a3e5750611a3d826118e9565b5b9050919050565b611a4d611cf3565b73ffffffffffffffffffffffffffffffffffffffff16611a6b61109e565b73ffffffffffffffffffffffffffffffffffffffff1614611aca57611a8e611cf3565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611ac1919061388c565b60405180910390fd5b565b8060029081611adb9190614450565b5050565b606081600001518260200151604051602001611afc929190613eb9565b6040516020818303038152906040529050919050565b600260045403611b4e576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600481905550565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611bca5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611bc1919061388c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611c3c5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611c33919061388c565b60405180910390fd5b600080611c498585612396565b91509150611c5a87878484876123c6565b50505050505050565b6001600481905550565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611cdf5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611cd6919061388c565b60405180910390fd5b611ced6000858585856123c6565b50505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d6d5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611d64919061388c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611ddf5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611dd6919061388c565b60405180910390fd5b611dec85858585856123c6565b5050505050565b611dfb612478565b6000600360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e3f611cf3565b604051611e4c919061388c565b60405180910390a1565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ef05760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611ee7919061388c565b60405180910390fd5b611f0d8360008484604051806020016040528060008152506123c6565b505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611fe06124b8565b6001600360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612024611cf3565b604051612031919061388c565b60405180910390a1565b612043612c35565b6000808380602001905181019061205a9190614537565b9150915060405180604001604052808381526020018281525092505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120ee5760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016120e5919061388c565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516121df9190612e01565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361225e5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401612255919061388c565b60405180910390fd5b60008061226b8484612396565b9150915061228c8560008484604051806020016040528060008152506123c6565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036123055760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016122fc919061388c565b60405180910390fd5b6000806123128585612396565b915091506123246000878484876123c6565b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b6123d2858585856124f9565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612471576000612410611cf3565b90506001845103612460576000612431600086611e6a90919063ffffffff16565b90506000612449600086611e6a90919063ffffffff16565b905061245983898985858961250b565b505061246f565b61246e8187878787876126bf565b5b505b5050505050565b612480610f32565b6124b6576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6124c0610f32565b156124f7576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61250584848484612873565b50505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156126b7578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161256c959493929190614577565b6020604051808303816000875af19250505080156125a857506040513d601f19601f820116820180604052508101906125a591906145e6565b60015b61262c573d80600081146125d8576040519150601f19603f3d011682016040523d82523d6000602084013e6125dd565b606091505b50600081510361262457846040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161261b919061388c565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146126b557846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016126ac919061388c565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561286b578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612720959493929190614613565b6020604051808303816000875af192505050801561275c57506040513d601f19601f8201168201806040525081019061275991906145e6565b60015b6127e0573d806000811461278c576040519150601f19603f3d011682016040523d82523d6000602084013e612791565b606091505b5060008151036127d857846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016127cf919061388c565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461286957846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612860919061388c565b60405180910390fd5b505b505050505050565b61287b6124b8565b6128878484848461288d565b50505050565b80518251146128d757815181516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016128ce929190613eb9565b60405180910390fd5b60006128e1611cf3565b905060005b8351811015612af05760006129048286611e6a90919063ffffffff16565b9050600061291b8386611e6a90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612a4857600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156129f057888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016129e7949392919061467b565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612ae3578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612adb91906140be565b925050819055505b50508060010190506128e6565b506001835103612baf576000612b10600085611e6a90919063ffffffff16565b90506000612b28600085611e6a90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612ba0929190613eb9565b60405180910390a45050612c2e565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612c259291906146c0565b60405180910390a45b5050505050565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c8e82612c63565b9050919050565b612c9e81612c83565b8114612ca957600080fd5b50565b600081359050612cbb81612c95565b92915050565b6000819050919050565b612cd481612cc1565b8114612cdf57600080fd5b50565b600081359050612cf181612ccb565b92915050565b60008060408385031215612d0e57612d0d612c59565b5b6000612d1c85828601612cac565b9250506020612d2d85828601612ce2565b9150509250929050565b612d4081612cc1565b82525050565b6000602082019050612d5b6000830184612d37565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d9681612d61565b8114612da157600080fd5b50565b600081359050612db381612d8d565b92915050565b600060208284031215612dcf57612dce612c59565b5b6000612ddd84828501612da4565b91505092915050565b60008115159050919050565b612dfb81612de6565b82525050565b6000602082019050612e166000830184612df2565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e6f82612e26565b810181811067ffffffffffffffff82111715612e8e57612e8d612e37565b5b80604052505050565b6000612ea1612c4f565b9050612ead8282612e66565b919050565b600067ffffffffffffffff821115612ecd57612ecc612e37565b5b612ed682612e26565b9050602081019050919050565b82818337600083830152505050565b6000612f05612f0084612eb2565b612e97565b905082815260208101848484011115612f2157612f20612e21565b5b612f2c848285612ee3565b509392505050565b600082601f830112612f4957612f48612e1c565b5b8135612f59848260208601612ef2565b91505092915050565b600060208284031215612f7857612f77612c59565b5b600082013567ffffffffffffffff811115612f9657612f95612c5e565b5b612fa284828501612f34565b91505092915050565b600060208284031215612fc157612fc0612c59565b5b6000612fcf84828501612ce2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613012578082015181840152602081019050612ff7565b60008484015250505050565b600061302982612fd8565b6130338185612fe3565b9350613043818560208601612ff4565b61304c81612e26565b840191505092915050565b60006020820190508181036000830152613071818461301e565b905092915050565b600067ffffffffffffffff82111561309457613093612e37565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156130c5576130c46130aa565b5b6130cf6040612e97565b905060006130df84828501612ce2565b60008301525060206130f384828501612ce2565b60208301525092915050565b600061311261310d84613079565b612e97565b90508083825260208201905060408402830185811115613135576131346130a5565b5b835b8181101561315e578061314a88826130af565b845260208401935050604081019050613137565b5050509392505050565b600082601f83011261317d5761317c612e1c565b5b813561318d8482602086016130ff565b91505092915050565b6000602082840312156131ac576131ab612c59565b5b600082013567ffffffffffffffff8111156131ca576131c9612c5e565b5b6131d684828501613168565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000613206826131df565b61321081856131ea565b9350613220818560208601612ff4565b61322981612e26565b840191505092915050565b6000602082019050818103600083015261324e81846131fb565b905092915050565b6000806040838503121561326d5761326c612c59565b5b600061327b85828601612ce2565b925050602061328c85828601612ce2565b9150509250929050565b600067ffffffffffffffff8211156132b1576132b0612e37565b5b602082029050602081019050919050565b60006132d56132d084613296565b612e97565b905080838252602082019050602084028301858111156132f8576132f76130a5565b5b835b81811015613321578061330d8882612ce2565b8452602084019350506020810190506132fa565b5050509392505050565b600082601f8301126133405761333f612e1c565b5b81356133508482602086016132c2565b91505092915050565b600067ffffffffffffffff82111561337457613373612e37565b5b61337d82612e26565b9050602081019050919050565b600061339d61339884613359565b612e97565b9050828152602081018484840111156133b9576133b8612e21565b5b6133c4848285612ee3565b509392505050565b600082601f8301126133e1576133e0612e1c565b5b81356133f184826020860161338a565b91505092915050565b6000806000806080858703121561341457613413612c59565b5b600061342287828801612cac565b945050602085013567ffffffffffffffff81111561344357613442612c5e565b5b61344f8782880161332b565b935050604085013567ffffffffffffffff8111156134705761346f612c5e565b5b61347c8782880161332b565b925050606085013567ffffffffffffffff81111561349d5761349c612c5e565b5b6134a9878288016133cc565b91505092959194509250565b600080600080600060a086880312156134d1576134d0612c59565b5b60006134df88828901612cac565b95505060206134f088828901612cac565b945050604086013567ffffffffffffffff81111561351157613510612c5e565b5b61351d8882890161332b565b935050606086013567ffffffffffffffff81111561353e5761353d612c5e565b5b61354a8882890161332b565b925050608086013567ffffffffffffffff81111561356b5761356a612c5e565b5b613577888289016133cc565b9150509295509295909350565b600067ffffffffffffffff82111561359f5761359e612e37565b5b602082029050602081019050919050565b60006135c36135be84613584565b612e97565b905080838252602082019050602084028301858111156135e6576135e56130a5565b5b835b8181101561360f57806135fb8882612cac565b8452602084019350506020810190506135e8565b5050509392505050565b600082601f83011261362e5761362d612e1c565b5b813561363e8482602086016135b0565b91505092915050565b6000806040838503121561365e5761365d612c59565b5b600083013567ffffffffffffffff81111561367c5761367b612c5e565b5b61368885828601613619565b925050602083013567ffffffffffffffff8111156136a9576136a8612c5e565b5b6136b58582860161332b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6136f481612cc1565b82525050565b600061370683836136eb565b60208301905092915050565b6000602082019050919050565b600061372a826136bf565b61373481856136ca565b935061373f836136db565b8060005b8381101561377057815161375788826136fa565b975061376283613712565b925050600181019050613743565b5085935050505092915050565b60006020820190508181036000830152613797818461371f565b905092915050565b6137a881612c83565b82525050565b600060a0820190506137c3600083018861379f565b6137d0602083018761379f565b6137dd6040830186612d37565b6137ea6060830185612d37565b6137f76080830184612df2565b9695505050505050565b60008060006060848603121561381a57613819612c59565b5b600061382886828701612cac565b935050602084013567ffffffffffffffff81111561384957613848612c5e565b5b6138558682870161332b565b925050604084013567ffffffffffffffff81111561387657613875612c5e565b5b6138828682870161332b565b9150509250925092565b60006020820190506138a1600083018461379f565b92915050565b6000602082840312156138bd576138bc612c59565b5b600082013567ffffffffffffffff8111156138db576138da612c5e565b5b6138e7848285016133cc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60408201600082015161393260008501826136eb565b50602082015161394560208501826136eb565b50505050565b6000613957838361391c565b60408301905092915050565b6000602082019050919050565b600061397b826138f0565b61398581856138fb565b93506139908361390c565b8060005b838110156139c15781516139a8888261394b565b97506139b383613963565b925050600181019050613994565b5085935050505092915050565b600060208201905081810360008301526139e88184613970565b905092915050565b6139f981612de6565b8114613a0457600080fd5b50565b600081359050613a16816139f0565b92915050565b60008060408385031215613a3357613a32612c59565b5b6000613a4185828601612cac565b9250506020613a5285828601613a07565b9150509250929050565b60008060008060808587031215613a7657613a75612c59565b5b6000613a8487828801612cac565b9450506020613a9587828801612ce2565b9350506040613aa687828801612ce2565b925050606085013567ffffffffffffffff811115613ac757613ac6612c5e565b5b613ad387828801613168565b91505092959194509250565b613ae881612d61565b82525050565b6000602082019050613b036000830184613adf565b92915050565b600080600060608486031215613b2257613b21612c59565b5b6000613b3086828701612cac565b9350506020613b4186828701612ce2565b9250506040613b5286828701612ce2565b9150509250925092565b60008060408385031215613b7357613b72612c59565b5b6000613b8185828601612cac565b9250506020613b9285828601612cac565b9150509250929050565b600080600080600060a08688031215613bb857613bb7612c59565b5b6000613bc688828901612cac565b9550506020613bd788828901612cac565b9450506040613be888828901612ce2565b9350506060613bf988828901612ce2565b925050608086013567ffffffffffffffff811115613c1a57613c19612c5e565b5b613c26888289016133cc565b9150509295509295909350565b600060208284031215613c4957613c48612c59565b5b6000613c5784828501612cac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ca757607f821691505b602082108103613cba57613cb9613c60565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000613d05826131df565b613d0f8185613cef565b9350613d1f818560208601612ff4565b80840191505092915050565b6000613d378285613cfa565b9150613d438284613cfa565b91508190509392505050565b7f496e73756666696369656e7420636f6e74726163742062616c616e6365000000600082015250565b6000613d85601d83612fe3565b9150613d9082613d4f565b602082019050919050565b60006020820190508181036000830152613db481613d78565b9050919050565b7f4f6e6c792074686520696e74656e64656420726563697069656e742063616e2060008201527f636f6e6669726d2074686973207472616e736665720000000000000000000000602082015250565b6000613e17603583612fe3565b9150613e2282613dbb565b604082019050919050565b60006020820190508181036000830152613e4681613e0a565b9050919050565b7f5472616e7366657220616c726561647920636f6e6669726d6564000000000000600082015250565b6000613e83601a83612fe3565b9150613e8e82613e4d565b602082019050919050565b60006020820190508181036000830152613eb281613e76565b9050919050565b6000604082019050613ece6000830185612d37565b613edb6020830184612d37565b9392505050565b6000604082019050613ef7600083018561379f565b613f04602083018461379f565b9392505050565b7f4f6e6c79207468652073656e6465722063616e2063616e63656c20746869732060008201527f7472616e73666572000000000000000000000000000000000000000000000000602082015250565b6000613f67602883612fe3565b9150613f7282613f0b565b604082019050919050565b60006020820190508181036000830152613f9681613f5a565b9050919050565b7f43616e6e6f742063616e63656c206120636f6e6669726d6564207472616e736660008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000613ff9602283612fe3565b915061400482613f9d565b604082019050919050565b6000602082019050818103600083015261402881613fec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061409882612cc1565b91506140a383612cc1565b9250826140b3576140b261402f565b5b828204905092915050565b60006140c982612cc1565b91506140d483612cc1565b92508282019050808211156140ec576140eb61405e565b5b92915050565b7f496e73756666696369656e7420726177206d6174657269616c2062616c616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b600061414e602183612fe3565b9150614159826140f2565b604082019050919050565b6000602082019050818103600083015261417d81614141565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006141ba601483612fe3565b91506141c582614184565b602082019050919050565b600060208201905081810360008301526141e9816141ad565b9050919050565b7f496e76616c696420726563697069656e74000000000000000000000000000000600082015250565b6000614226601183612fe3565b9150614231826141f0565b602082019050919050565b6000602082019050818103600083015261425581614219565b9050919050565b600061426782612cc1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036142995761429861405e565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026143067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826142c9565b61431086836142c9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061434d61434861434384612cc1565b614328565b612cc1565b9050919050565b6000819050919050565b61436783614332565b61437b61437382614354565b8484546142d6565b825550505050565b600090565b614390614383565b61439b81848461435e565b505050565b5b818110156143bf576143b4600082614388565b6001810190506143a1565b5050565b601f821115614404576143d5816142a4565b6143de846142b9565b810160208510156143ed578190505b6144016143f9856142b9565b8301826143a0565b50505b505050565b600082821c905092915050565b600061442760001984600802614409565b1980831691505092915050565b60006144408383614416565b9150826002028217905092915050565b61445982612fd8565b67ffffffffffffffff81111561447257614471612e37565b5b61447c8254613c8f565b6144878282856143c3565b600060209050601f8311600181146144ba57600084156144a8578287015190505b6144b28582614434565b86555061451a565b601f1984166144c8866142a4565b60005b828110156144f0578489015182556001820191506020850194506020810190506144cb565b8683101561450d5784890151614509601f891682614416565b8355505b6001600288020188555050505b505050505050565b60008151905061453181612ccb565b92915050565b6000806040838503121561454e5761454d612c59565b5b600061455c85828601614522565b925050602061456d85828601614522565b9150509250929050565b600060a08201905061458c600083018861379f565b614599602083018761379f565b6145a66040830186612d37565b6145b36060830185612d37565b81810360808301526145c581846131fb565b90509695505050505050565b6000815190506145e081612d8d565b92915050565b6000602082840312156145fc576145fb612c59565b5b600061460a848285016145d1565b91505092915050565b600060a082019050614628600083018861379f565b614635602083018761379f565b8181036040830152614647818661371f565b9050818103606083015261465b818561371f565b9050818103608083015261466f81846131fb565b90509695505050505050565b6000608082019050614690600083018761379f565b61469d6020830186612d37565b6146aa6040830185612d37565b6146b76060830184612d37565b95945050505050565b600060408201905081810360008301526146da818561371f565b905081810360208301526146ee818461371f565b9050939250505056fea26469706673582212207f9ca4fa3cd36cffbc75d402e2f691402bce68b45068d051751d0c2d05ab7c5664736f6c63430008180033";
  public static final String FUNC_ARRAYSTRUCTTOBYTES = "arrayStructToBytes";
  public static final String FUNC_BALANCEOF = "balanceOf";
  public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";
  public static final String FUNC_BURN = "burn";
  public static final String FUNC_BURNBATCH = "burnBatch";
  public static final String FUNC_BYTESTOARRAYSTRUCT = "bytesToArrayStruct";
  public static final String FUNC_CANCELTRANSFER = "cancelTransfer";
  public static final String FUNC_CONFIRMTRANSFER = "confirmTransfer";
  public static final String FUNC_EMERGENCYWITHDRAW = "emergencyWithdraw";
  public static final String FUNC_INITIATETRANSFER = "initiateTransfer";
  public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";
  public static final String FUNC_MINT = "mint";
  public static final String FUNC_MINTBATCH = "mintBatch";
  public static final String FUNC_ONERC1155BATCHRECEIVED = "onERC1155BatchReceived";
  public static final String FUNC_ONERC1155RECEIVED = "onERC1155Received";
  public static final String FUNC_OWNER = "owner";
  public static final String FUNC_PAUSE = "pause";
  public static final String FUNC_PAUSED = "paused";
  public static final String FUNC_PENDINGTRANSFERCOUNT = "pendingTransferCount";
  public static final String FUNC_PENDINGTRANSFERS = "pendingTransfers";
  public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";
  public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";
  public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";
  public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";
  public static final String FUNC_SETURI = "setURI";
  public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";
  public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";
  public static final String FUNC_UNPAUSE = "unpause";
  public static final String FUNC_URI = "uri";
  public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Bool>() {
    }));
  public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }));
  ;
  public static final Event PAUSED_EVENT = new Event("Paused",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
    }));
  ;
  public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<DynamicArray<Uint256>>() {
    }, new TypeReference<DynamicArray<Uint256>>() {
    }));
  ;
  public static final Event TRANSFERCANCELLED_EVENT = new Event("TransferCancelled",
    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }, new TypeReference<Uint256>() {
    }));
  ;
  public static final Event TRANSFERCONFIRMED_EVENT = new Event("TransferConfirmed",
    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }, new TypeReference<Uint256>() {
    }));
  ;
  public static final Event TRANSFERINITIATED_EVENT = new Event("TransferInitiated",
    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }, new TypeReference<Uint256>() {
    }));
  ;
  public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }, new TypeReference<Uint256>() {
    }));
  ;
  public static final Event URI_EVENT = new Event("URI",
    Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
    }, new TypeReference<Uint256>(true) {
    }));
  ;
  public static final Event UNPAUSED_EVENT = new Event("Unpaused",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
    }));
  ;
  protected static final HashMap<String, String> _addresses;
  ;
  private static String librariesLinkedBinary;
  
  static {
    _addresses = new HashMap<String, String>();
  }
  
  @Deprecated
  protected TokenV2(String contractAddress, Web3j web3j, Credentials credentials,
                    BigInteger gasPrice, BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
  }
  
  protected TokenV2(String contractAddress, Web3j web3j, Credentials credentials,
                    ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }
  
  @Deprecated
  protected TokenV2(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                    BigInteger gasPrice, BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }
  
  protected TokenV2(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                    ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
  }
  
  public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
    ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
    ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
    typedResponse.log = log;
    typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
    ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
    OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
    typedResponse.log = log;
    typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
    ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      PausedEventResponse typedResponse = new PausedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static PausedEventResponse getPausedEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
    PausedEventResponse typedResponse = new PausedEventResponse();
    typedResponse.log = log;
    typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  public static List<TransferBatchEventResponse> getTransferBatchEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
    ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
      typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferBatchEventResponse getTransferBatchEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
    TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
    typedResponse.log = log;
    typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
    typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
    return typedResponse;
  }
  
  public static List<TransferCancelledEventResponse> getTransferCancelledEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERCANCELLED_EVENT, transactionReceipt);
    ArrayList<TransferCancelledEventResponse> responses = new ArrayList<TransferCancelledEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferCancelledEventResponse typedResponse = new TransferCancelledEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.transferId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferCancelledEventResponse getTransferCancelledEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERCANCELLED_EVENT, log);
    TransferCancelledEventResponse typedResponse = new TransferCancelledEventResponse();
    typedResponse.log = log;
    typedResponse.transferId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
    typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<TransferConfirmedEventResponse> getTransferConfirmedEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERCONFIRMED_EVENT, transactionReceipt);
    ArrayList<TransferConfirmedEventResponse> responses = new ArrayList<TransferConfirmedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferConfirmedEventResponse typedResponse = new TransferConfirmedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.transferId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferConfirmedEventResponse getTransferConfirmedEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERCONFIRMED_EVENT, log);
    TransferConfirmedEventResponse typedResponse = new TransferConfirmedEventResponse();
    typedResponse.log = log;
    typedResponse.transferId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
    typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<TransferInitiatedEventResponse> getTransferInitiatedEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERINITIATED_EVENT, transactionReceipt);
    ArrayList<TransferInitiatedEventResponse> responses = new ArrayList<TransferInitiatedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferInitiatedEventResponse typedResponse = new TransferInitiatedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.transferId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferInitiatedEventResponse getTransferInitiatedEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERINITIATED_EVENT, log);
    TransferInitiatedEventResponse typedResponse = new TransferInitiatedEventResponse();
    typedResponse.log = log;
    typedResponse.transferId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
    typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<TransferSingleEventResponse> getTransferSingleEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
    ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferSingleEventResponse getTransferSingleEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
    TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
    typedResponse.log = log;
    typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
    typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
    ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      URIEventResponse typedResponse = new URIEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static URIEventResponse getURIEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(URI_EVENT, log);
    URIEventResponse typedResponse = new URIEventResponse();
    typedResponse.log = log;
    typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  public static List<UnpausedEventResponse> getUnpausedEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
    ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      UnpausedEventResponse typedResponse = new UnpausedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
    UnpausedEventResponse typedResponse = new UnpausedEventResponse();
    typedResponse.log = log;
    typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  @Deprecated
  public static TokenV2 load(String contractAddress, Web3j web3j, Credentials credentials,
                             BigInteger gasPrice, BigInteger gasLimit) {
    return new TokenV2(contractAddress, web3j, credentials, gasPrice, gasLimit);
  }
  
  @Deprecated
  public static TokenV2 load(String contractAddress, Web3j web3j,
                             TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
    return new TokenV2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }
  
  public static TokenV2 load(String contractAddress, Web3j web3j, Credentials credentials,
                             ContractGasProvider contractGasProvider) {
    return new TokenV2(contractAddress, web3j, credentials, contractGasProvider);
  }
  
  public static TokenV2 load(String contractAddress, Web3j web3j,
                             TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
    return new TokenV2(contractAddress, web3j, transactionManager, contractGasProvider);
  }
  
  public static RemoteCall<TokenV2> deploy(Web3j web3j, Credentials credentials,
                                           ContractGasProvider contractGasProvider, String uri) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri)));
    return deployRemoteCall(TokenV2.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
  }
  
  public static RemoteCall<TokenV2> deploy(Web3j web3j, TransactionManager transactionManager,
                                           ContractGasProvider contractGasProvider, String uri) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri)));
    return deployRemoteCall(TokenV2.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
  }
  
  @Deprecated
  public static RemoteCall<TokenV2> deploy(Web3j web3j, Credentials credentials,
                                           BigInteger gasPrice, BigInteger gasLimit, String uri) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri)));
    return deployRemoteCall(TokenV2.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
  }
  
  @Deprecated
  public static RemoteCall<TokenV2> deploy(Web3j web3j, TransactionManager transactionManager,
                                           BigInteger gasPrice, BigInteger gasLimit, String uri) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri)));
    return deployRemoteCall(TokenV2.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
  }
  
  public static void linkLibraries(List<Contract.LinkReference> references) {
    librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
  }
  
  private static String getDeploymentBinary() {
    if (librariesLinkedBinary != null) {
      return librariesLinkedBinary;
    } else {
      return BINARY;
    }
  }
  
  public static String getPreviouslyDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }
  
  public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
  }
  
  public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
    return approvalForAllEventFlowable(filter);
  }
  
  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
    EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
  }
  
  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
    return ownershipTransferredEventFlowable(filter);
  }
  
  public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
  }
  
  public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
                                                           DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
    return pausedEventFlowable(filter);
  }
  
  public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferBatchEventFromLog(log));
  }
  
  public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
    return transferBatchEventFlowable(filter);
  }
  
  public Flowable<TransferCancelledEventResponse> transferCancelledEventFlowable(
    EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferCancelledEventFromLog(log));
  }
  
  public Flowable<TransferCancelledEventResponse> transferCancelledEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERCANCELLED_EVENT));
    return transferCancelledEventFlowable(filter);
  }
  
  public Flowable<TransferConfirmedEventResponse> transferConfirmedEventFlowable(
    EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferConfirmedEventFromLog(log));
  }
  
  public Flowable<TransferConfirmedEventResponse> transferConfirmedEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERCONFIRMED_EVENT));
    return transferConfirmedEventFlowable(filter);
  }
  
  public Flowable<TransferInitiatedEventResponse> transferInitiatedEventFlowable(
    EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferInitiatedEventFromLog(log));
  }
  
  public Flowable<TransferInitiatedEventResponse> transferInitiatedEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERINITIATED_EVENT));
    return transferInitiatedEventFlowable(filter);
  }
  
  public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferSingleEventFromLog(log));
  }
  
  public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
    return transferSingleEventFlowable(filter);
  }
  
  public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getURIEventFromLog(log));
  }
  
  public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock,
                                                     DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
    return uRIEventFlowable(filter);
  }
  
  public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
  }
  
  public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
                                                               DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
    return unpausedEventFlowable(filter);
  }
  
  public RemoteFunctionCall<byte[]> call_arrayStructToBytes(List<productToBurn> _arrayStruct) {
    final Function function = new Function(FUNC_ARRAYSTRUCTTOBYTES,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<productToBurn>(productToBurn.class, _arrayStruct)),
      Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {
      }));
    return executeRemoteCallSingleValueReturn(function, byte[].class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_arrayStructToBytes(
    List<productToBurn> _arrayStruct) {
    final Function function = new Function(
      FUNC_ARRAYSTRUCTTOBYTES,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<productToBurn>(productToBurn.class, _arrayStruct)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<BigInteger> call_balanceOf(String account, BigInteger id) {
    final Function function = new Function(FUNC_BALANCEOF,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
      }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_balanceOf(String account, BigInteger id) {
    final Function function = new Function(
      FUNC_BALANCEOF,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<List> call_balanceOfBatch(List<String> accounts,
                                                      List<BigInteger> ids) {
    final Function function = new Function(FUNC_BALANCEOFBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
          org.web3j.abi.datatypes.Address.class,
          org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))),
      Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
      }));
    return new RemoteFunctionCall<List>(function,
      new Callable<List>() {
        @Override
        @SuppressWarnings("unchecked")
        public List call() throws Exception {
          List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
          return convertToNative(result);
        }
      });
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_balanceOfBatch(List<String> accounts,
                                                                    List<BigInteger> ids) {
    final Function function = new Function(
      FUNC_BALANCEOFBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
          org.web3j.abi.datatypes.Address.class,
          org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_burn(String account, BigInteger id,
                                                          BigInteger value) {
    final Function function = new Function(
      FUNC_BURN,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(value)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_burnBatch(String account,
                                                               List<BigInteger> ids, List<BigInteger> values) {
    final Function function = new Function(
      FUNC_BURNBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class))),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<List> call_bytesToArrayStruct(byte[] _data) {
    final Function function = new Function(FUNC_BYTESTOARRAYSTRUCT,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_data)),
      Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<productToBurn>>() {
      }));
    return new RemoteFunctionCall<List>(function,
      new Callable<List>() {
        @Override
        @SuppressWarnings("unchecked")
        public List call() throws Exception {
          List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
          return convertToNative(result);
        }
      });
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_bytesToArrayStruct(byte[] _data) {
    final Function function = new Function(
      FUNC_BYTESTOARRAYSTRUCT,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_cancelTransfer(BigInteger transferId) {
    final Function function = new Function(
      FUNC_CANCELTRANSFER,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(transferId)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_confirmTransfer(BigInteger transferId) {
    final Function function = new Function(
      FUNC_CONFIRMTRANSFER,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(transferId)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_emergencyWithdraw(BigInteger id,
                                                                       BigInteger amount) {
    final Function function = new Function(
      FUNC_EMERGENCYWITHDRAW,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(amount)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_initiateTransfer(String to, BigInteger id,
                                                                      BigInteger amount) {
    final Function function = new Function(
      FUNC_INITIATETRANSFER,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(amount)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Boolean> call_isApprovedForAll(String account, String operator) {
    final Function function = new Function(FUNC_ISAPPROVEDFORALL,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.Address(operator)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
      }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_isApprovedForAll(String account,
                                                                      String operator) {
    final Function function = new Function(
      FUNC_ISAPPROVEDFORALL,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.Address(operator)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_mint(String account, BigInteger id,
                                                          BigInteger amount, List<productToBurn> toburn) {
    final Function function = new Function(
      FUNC_MINT,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(amount),
        new org.web3j.abi.datatypes.DynamicArray<productToBurn>(productToBurn.class, toburn)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_mintBatch(String to, List<BigInteger> ids,
                                                               List<BigInteger> amounts, byte[] data) {
    final Function function = new Function(
      FUNC_MINTBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_onERC1155BatchReceived(String param0,
                                                                            String param1, List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
    final Function function = new Function(
      FUNC_ONERC1155BATCHRECEIVED,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0),
        new org.web3j.abi.datatypes.Address(param1),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicBytes(param4)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<byte[]> call_onERC1155BatchReceived(String param0, String param1,
                                                                List<BigInteger> param2, List<BigInteger> param3, byte[] param4) {
    final Function function = new Function(FUNC_ONERC1155BATCHRECEIVED,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0),
        new org.web3j.abi.datatypes.Address(param1),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(param2, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(param3, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicBytes(param4)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {
      }));
    return executeRemoteCallSingleValueReturn(function, byte[].class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_onERC1155Received(String param0,
                                                                       String param1, BigInteger param2, BigInteger param3, byte[] param4) {
    final Function function = new Function(
      FUNC_ONERC1155RECEIVED,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0),
        new org.web3j.abi.datatypes.Address(param1),
        new org.web3j.abi.datatypes.generated.Uint256(param2),
        new org.web3j.abi.datatypes.generated.Uint256(param3),
        new org.web3j.abi.datatypes.DynamicBytes(param4)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<byte[]> call_onERC1155Received(String param0, String param1,
                                                           BigInteger param2, BigInteger param3, byte[] param4) {
    final Function function = new Function(FUNC_ONERC1155RECEIVED,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0),
        new org.web3j.abi.datatypes.Address(param1),
        new org.web3j.abi.datatypes.generated.Uint256(param2),
        new org.web3j.abi.datatypes.generated.Uint256(param3),
        new org.web3j.abi.datatypes.DynamicBytes(param4)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {
      }));
    return executeRemoteCallSingleValueReturn(function, byte[].class);
  }
  
  public RemoteFunctionCall<String> call_owner() {
    final Function function = new Function(FUNC_OWNER,
      Arrays.<Type>asList(),
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
      }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_owner() {
    final Function function = new Function(
      FUNC_OWNER,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_pause() {
    final Function function = new Function(
      FUNC_PAUSE,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Boolean> call_paused() {
    final Function function = new Function(FUNC_PAUSED,
      Arrays.<Type>asList(),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
      }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_paused() {
    final Function function = new Function(
      FUNC_PAUSED,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<BigInteger> call_pendingTransferCount() {
    final Function function = new Function(FUNC_PENDINGTRANSFERCOUNT,
      Arrays.<Type>asList(),
      Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
      }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_pendingTransferCount() {
    final Function function = new Function(
      FUNC_PENDINGTRANSFERCOUNT,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, Boolean>> call_pendingTransfers(
    BigInteger param0) {
    final Function function = new Function(FUNC_PENDINGTRANSFERS,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
      }, new TypeReference<Address>() {
      }, new TypeReference<Uint256>() {
      }, new TypeReference<Uint256>() {
      }, new TypeReference<Bool>() {
      }));
    return new RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, Boolean>>(function,
      new Callable<Tuple5<String, String, BigInteger, BigInteger, Boolean>>() {
        @Override
        public Tuple5<String, String, BigInteger, BigInteger, Boolean> call() throws
          Exception {
          List<Type> results = executeCallMultipleValueReturn(function);
          return new Tuple5<String, String, BigInteger, BigInteger, Boolean>(
            (String) results.get(0).getValue(),
            (String) results.get(1).getValue(),
            (BigInteger) results.get(2).getValue(),
            (BigInteger) results.get(3).getValue(),
            (Boolean) results.get(4).getValue());
        }
      });
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_pendingTransfers(BigInteger param0) {
    final Function function = new Function(
      FUNC_PENDINGTRANSFERS,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_renounceOwnership() {
    final Function function = new Function(
      FUNC_RENOUNCEOWNERSHIP,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_safeBatchTransferFrom(String from, String to,
                                                                           List<BigInteger> ids, List<BigInteger> values, byte[] data) {
    final Function function = new Function(
      FUNC_SAFEBATCHTRANSFERFROM,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
        new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_safeTransferFrom(String from, String to,
                                                                      BigInteger id, BigInteger value, byte[] data) {
    final Function function = new Function(
      FUNC_SAFETRANSFERFROM,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
        new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(value),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_setApprovalForAll(String operator,
                                                                       Boolean approved) {
    final Function function = new Function(
      FUNC_SETAPPROVALFORALL,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator),
        new org.web3j.abi.datatypes.Bool(approved)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_setURI(String newuri) {
    final Function function = new Function(
      FUNC_SETURI,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newuri)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Boolean> call_supportsInterface(byte[] interfaceId) {
    final Function function = new Function(FUNC_SUPPORTSINTERFACE,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
      }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_supportsInterface(byte[] interfaceId) {
    final Function function = new Function(
      FUNC_SUPPORTSINTERFACE,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_transferOwnership(String newOwner) {
    final Function function = new Function(
      FUNC_TRANSFEROWNERSHIP,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_unpause() {
    final Function function = new Function(
      FUNC_UNPAUSE,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<String> call_uri(BigInteger param0) {
    final Function function = new Function(FUNC_URI,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
      }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_uri(BigInteger param0) {
    final Function function = new Function(
      FUNC_URI,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  protected String getStaticDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }
  
  public static class productToBurn extends StaticStruct {
    public BigInteger prod;
    
    public BigInteger quantity;
    
    public productToBurn(BigInteger prod, BigInteger quantity) {
      super(new org.web3j.abi.datatypes.generated.Uint256(prod),
        new org.web3j.abi.datatypes.generated.Uint256(quantity));
      this.prod = prod;
      this.quantity = quantity;
    }
    
    public productToBurn(Uint256 prod, Uint256 quantity) {
      super(prod, quantity);
      this.prod = prod.getValue();
      this.quantity = quantity.getValue();
    }
  }
  
  public static class ApprovalForAllEventResponse extends BaseEventResponse {
    public String account;
    
    public String operator;
    
    public Boolean approved;
  }
  
  public static class OwnershipTransferredEventResponse extends BaseEventResponse {
    public String previousOwner;
    
    public String newOwner;
  }
  
  public static class PausedEventResponse extends BaseEventResponse {
    public String account;
  }
  
  public static class TransferBatchEventResponse extends BaseEventResponse {
    public String operator;
    
    public String from;
    
    public String to;
    
    public List<BigInteger> ids;
    
    public List<BigInteger> values;
  }
  
  public static class TransferCancelledEventResponse extends BaseEventResponse {
    public BigInteger transferId;
    
    public String from;
    
    public String to;
    
    public BigInteger id;
    
    public BigInteger amount;
  }
  
  public static class TransferConfirmedEventResponse extends BaseEventResponse {
    public BigInteger transferId;
    
    public String from;
    
    public String to;
    
    public BigInteger id;
    
    public BigInteger amount;
  }
  
  public static class TransferInitiatedEventResponse extends BaseEventResponse {
    public BigInteger transferId;
    
    public String from;
    
    public String to;
    
    public BigInteger id;
    
    public BigInteger amount;
  }
  
  public static class TransferSingleEventResponse extends BaseEventResponse {
    public String operator;
    
    public String from;
    
    public String to;
    
    public BigInteger id;
    
    public BigInteger value;
  }
  
  public static class URIEventResponse extends BaseEventResponse {
    public BigInteger id;
    
    public String value;
  }
  
  public static class UnpausedEventResponse extends BaseEventResponse {
    public String account;
  }
}
