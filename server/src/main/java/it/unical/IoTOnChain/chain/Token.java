package it.unical.IoTOnChain.chain;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.0.
 */
@SuppressWarnings("rawtypes")
public class Token extends Contract {
  public static final String BINARY = "0x60806040523480156200001157600080fd5b506040516200342238038062003422833981810160405281019062000037919062000248565b806040518060200160405280600081525062000059816200010360201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000cf5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000c691906200028b565b60405180910390fd5b620000e0816200011860201b60201c565b506000600360146101000a81548160ff0219169083151502179055505062000609565b806002908162000114919062000522565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021082620001e3565b9050919050565b620002228162000203565b81146200022e57600080fd5b50565b600081519050620002428162000217565b92915050565b600060208284031215620002615762000260620001de565b5b6000620002718482850162000231565b91505092915050565b620002858162000203565b82525050565b6000602082019050620002a260008301846200027a565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032a57607f821691505b60208210810362000340576200033f620002e2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200036b565b620003b686836200036b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000403620003fd620003f784620003ce565b620003d8565b620003ce565b9050919050565b6000819050919050565b6200041f83620003e2565b620004376200042e826200040a565b84845462000378565b825550505050565b600090565b6200044e6200043f565b6200045b81848462000414565b505050565b5b8181101562000483576200047760008262000444565b60018101905062000461565b5050565b601f821115620004d2576200049c8162000346565b620004a7846200035b565b81016020851015620004b7578190505b620004cf620004c6856200035b565b83018262000460565b50505b505050565b600082821c905092915050565b6000620004f760001984600802620004d7565b1980831691505092915050565b6000620005128383620004e4565b9150826002028217905092915050565b6200052d82620002a8565b67ffffffffffffffff811115620005495762000548620002b3565b5b62000555825462000311565b6200056282828562000487565b600060209050601f8311600181146200059a576000841562000585578287015190505b62000591858262000504565b86555062000601565b601f198416620005aa8662000346565b60005b82811015620005d457848901518255600182019150602085019450602081019050620005ad565b86831015620005f45784890151620005f0601f891682620004e4565b8355505b6001600288020188555050505b505050505050565b612e0980620006196000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c80636b20c454116100ad578063a22cb46511610071578063a22cb465146102cb578063e985e9c5146102e7578063f242432a14610317578063f2fde38b14610333578063f5298aca1461034f57610120565b80636b20c45414610261578063715018a61461027d578063731133e9146102875780638456cb59146102a35780638da5cb5b146102ad57610120565b80631f7fdffa116100f45780631f7fdffa146101d15780632eb2c2d6146101ed5780633f4ba83a146102095780634e1273f4146102135780635c975abb1461024357610120565b8062fdd58e1461012557806301ffc9a71461015557806302fe5305146101855780630e89341c146101a1575b600080fd5b61013f600480360381019061013a9190611cb1565b61036b565b60405161014c9190611d00565b60405180910390f35b61016f600480360381019061016a9190611d73565b6103c5565b60405161017c9190611dbb565b60405180910390f35b61019f600480360381019061019a9190611f1c565b6104a7565b005b6101bb60048036038101906101b69190611f65565b6104bb565b6040516101c89190612011565b60405180910390f35b6101eb60048036038101906101e6919061219c565b61054f565b005b61020760048036038101906102029190612257565b610569565b005b610211610611565b005b61022d600480360381019061022891906123e9565b610623565b60405161023a919061251f565b60405180910390f35b61024b61072c565b6040516102589190611dbb565b60405180910390f35b61027b60048036038101906102769190612541565b610743565b005b6102856107ef565b005b6102a1600480360381019061029c91906125cc565b610803565b005b6102ab61081d565b005b6102b561082f565b6040516102c2919061265e565b60405180910390f35b6102e560048036038101906102e091906126a5565b610859565b005b61030160048036038101906102fc91906126e5565b61086f565b60405161030e9190611dbb565b60405180910390f35b610331600480360381019061032c9190612725565b610903565b005b61034d600480360381019061034891906127bc565b6109ab565b005b610369600480360381019061036491906127e9565b610a31565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104a0575061049f82610add565b5b9050919050565b6104af610b47565b6104b881610bce565b50565b6060600280546104ca9061286b565b80601f01602080910402602001604051908101604052809291908181526020018280546104f69061286b565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b50505050509050919050565b610557610b47565b61056384848484610be1565b50505050565b6000610573610c67565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156105b857506105b6868261086f565b155b156105fc5780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016105f392919061289c565b60405180910390fd5b6106098686868686610c6f565b505050505050565b610619610b47565b610621610d67565b565b6060815183511461066f57815183516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016106669291906128c5565b60405180910390fd5b6000835167ffffffffffffffff81111561068c5761068b611df1565b5b6040519080825280602002602001820160405280156106ba5781602001602082028036833780820191505090505b50905060005b8451811015610721576106f76106df8287610dca90919063ffffffff16565b6106f28387610dde90919063ffffffff16565b61036b565b82828151811061070a576107096128ee565b5b6020026020010181815250508060010190506106c0565b508091505092915050565b6000600360149054906101000a900460ff16905090565b61074b610c67565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561079457506107928361078d610c67565b61086f565b155b156107df576107a1610c67565b836040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016107d692919061289c565b60405180910390fd5b6107ea838383610df2565b505050565b6107f7610b47565b6108016000610e86565b565b61080b610b47565b61081784848484610f4c565b50505050565b610825610b47565b61082d610fe5565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61086b610864610c67565b8383611048565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061090d610c67565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141580156109525750610950868261086f565b155b156109965780866040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161098d92919061289c565b60405180910390fd5b6109a386868686866111b8565b505050505050565b6109b3610b47565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a255760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a1c919061265e565b60405180910390fd5b610a2e81610e86565b50565b610a39610c67565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610a825750610a8083610a7b610c67565b61086f565b155b15610acd57610a8f610c67565b836040517fe237d922000000000000000000000000000000000000000000000000000000008152600401610ac492919061289c565b60405180910390fd5b610ad88383836112c3565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610b4f610c67565b73ffffffffffffffffffffffffffffffffffffffff16610b6d61082f565b73ffffffffffffffffffffffffffffffffffffffff1614610bcc57610b90610c67565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610bc3919061265e565b60405180910390fd5b565b8060029081610bdd9190612ac9565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610c535760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610c4a919061265e565b60405180910390fd5b610c6160008585858561136a565b50505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610ce15760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610cd8919061265e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610d535760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401610d4a919061265e565b60405180910390fd5b610d60858585858561136a565b5050505050565b610d6f61141c565b6000600360146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610db3610c67565b604051610dc0919061265e565b60405180910390a1565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e645760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401610e5b919061265e565b60405180910390fd5b610e8183600084846040518060200160405280600081525061136a565b505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610fbe5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401610fb5919061265e565b60405180910390fd5b600080610fcb858561145c565b91509150610fdd60008784848761136a565b505050505050565b610fed61148c565b6001600360146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611031610c67565b60405161103e919061265e565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110ba5760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016110b1919061265e565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111ab9190611dbb565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361122a5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611221919061265e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361129c5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611293919061265e565b60405180910390fd5b6000806112a9858561145c565b915091506112ba878784848761136a565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113355760006040517f01a8351400000000000000000000000000000000000000000000000000000000815260040161132c919061265e565b60405180910390fd5b600080611342848461145c565b9150915061136385600084846040518060200160405280600081525061136a565b5050505050565b611376858585856114cd565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146114155760006113b4610c67565b905060018451036114045760006113d5600086610dde90919063ffffffff16565b905060006113ed600086610dde90919063ffffffff16565b90506113fd8389898585896114df565b5050611413565b611412818787878787611693565b5b505b5050505050565b61142461072c565b61145a576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b61149461072c565b156114cb576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6114d984848484611847565b50505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561168b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611540959493929190612bf0565b6020604051808303816000875af192505050801561157c57506040513d601f19601f820116820180604052508101906115799190612c5f565b60015b611600573d80600081146115ac576040519150601f19603f3d011682016040523d82523d6000602084013e6115b1565b606091505b5060008151036115f857846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016115ef919061265e565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461168957846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611680919061265e565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561183f578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016116f4959493929190612c8c565b6020604051808303816000875af192505050801561173057506040513d601f19601f8201168201806040525081019061172d9190612c5f565b60015b6117b4573d8060008114611760576040519150601f19603f3d011682016040523d82523d6000602084013e611765565b606091505b5060008151036117ac57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016117a3919061265e565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461183d57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611834919061265e565b60405180910390fd5b505b505050505050565b61184f61148c565b61185b84848484611861565b50505050565b80518251146118ab57815181516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016118a29291906128c5565b60405180910390fd5b60006118b5610c67565b905060005b8351811015611ac45760006118d88286610dde90919063ffffffff16565b905060006118ef8386610dde90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611a1c57600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156119c457888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016119bb9493929190612cf4565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611ab7578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611aaf9190612d68565b925050819055505b50508060010190506118ba565b506001835103611b83576000611ae4600085610dde90919063ffffffff16565b90506000611afc600085610dde90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611b749291906128c5565b60405180910390a45050611c02565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611bf9929190612d9c565b60405180910390a45b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c4882611c1d565b9050919050565b611c5881611c3d565b8114611c6357600080fd5b50565b600081359050611c7581611c4f565b92915050565b6000819050919050565b611c8e81611c7b565b8114611c9957600080fd5b50565b600081359050611cab81611c85565b92915050565b60008060408385031215611cc857611cc7611c13565b5b6000611cd685828601611c66565b9250506020611ce785828601611c9c565b9150509250929050565b611cfa81611c7b565b82525050565b6000602082019050611d156000830184611cf1565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d5081611d1b565b8114611d5b57600080fd5b50565b600081359050611d6d81611d47565b92915050565b600060208284031215611d8957611d88611c13565b5b6000611d9784828501611d5e565b91505092915050565b60008115159050919050565b611db581611da0565b82525050565b6000602082019050611dd06000830184611dac565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e2982611de0565b810181811067ffffffffffffffff82111715611e4857611e47611df1565b5b80604052505050565b6000611e5b611c09565b9050611e678282611e20565b919050565b600067ffffffffffffffff821115611e8757611e86611df1565b5b611e9082611de0565b9050602081019050919050565b82818337600083830152505050565b6000611ebf611eba84611e6c565b611e51565b905082815260208101848484011115611edb57611eda611ddb565b5b611ee6848285611e9d565b509392505050565b600082601f830112611f0357611f02611dd6565b5b8135611f13848260208601611eac565b91505092915050565b600060208284031215611f3257611f31611c13565b5b600082013567ffffffffffffffff811115611f5057611f4f611c18565b5b611f5c84828501611eee565b91505092915050565b600060208284031215611f7b57611f7a611c13565b5b6000611f8984828501611c9c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fcc578082015181840152602081019050611fb1565b60008484015250505050565b6000611fe382611f92565b611fed8185611f9d565b9350611ffd818560208601611fae565b61200681611de0565b840191505092915050565b6000602082019050818103600083015261202b8184611fd8565b905092915050565b600067ffffffffffffffff82111561204e5761204d611df1565b5b602082029050602081019050919050565b600080fd5b600061207761207284612033565b611e51565b9050808382526020820190506020840283018581111561209a5761209961205f565b5b835b818110156120c357806120af8882611c9c565b84526020840193505060208101905061209c565b5050509392505050565b600082601f8301126120e2576120e1611dd6565b5b81356120f2848260208601612064565b91505092915050565b600067ffffffffffffffff82111561211657612115611df1565b5b61211f82611de0565b9050602081019050919050565b600061213f61213a846120fb565b611e51565b90508281526020810184848401111561215b5761215a611ddb565b5b612166848285611e9d565b509392505050565b600082601f83011261218357612182611dd6565b5b813561219384826020860161212c565b91505092915050565b600080600080608085870312156121b6576121b5611c13565b5b60006121c487828801611c66565b945050602085013567ffffffffffffffff8111156121e5576121e4611c18565b5b6121f1878288016120cd565b935050604085013567ffffffffffffffff81111561221257612211611c18565b5b61221e878288016120cd565b925050606085013567ffffffffffffffff81111561223f5761223e611c18565b5b61224b8782880161216e565b91505092959194509250565b600080600080600060a0868803121561227357612272611c13565b5b600061228188828901611c66565b955050602061229288828901611c66565b945050604086013567ffffffffffffffff8111156122b3576122b2611c18565b5b6122bf888289016120cd565b935050606086013567ffffffffffffffff8111156122e0576122df611c18565b5b6122ec888289016120cd565b925050608086013567ffffffffffffffff81111561230d5761230c611c18565b5b6123198882890161216e565b9150509295509295909350565b600067ffffffffffffffff82111561234157612340611df1565b5b602082029050602081019050919050565b600061236561236084612326565b611e51565b905080838252602082019050602084028301858111156123885761238761205f565b5b835b818110156123b1578061239d8882611c66565b84526020840193505060208101905061238a565b5050509392505050565b600082601f8301126123d0576123cf611dd6565b5b81356123e0848260208601612352565b91505092915050565b60008060408385031215612400576123ff611c13565b5b600083013567ffffffffffffffff81111561241e5761241d611c18565b5b61242a858286016123bb565b925050602083013567ffffffffffffffff81111561244b5761244a611c18565b5b612457858286016120cd565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61249681611c7b565b82525050565b60006124a8838361248d565b60208301905092915050565b6000602082019050919050565b60006124cc82612461565b6124d6818561246c565b93506124e18361247d565b8060005b838110156125125781516124f9888261249c565b9750612504836124b4565b9250506001810190506124e5565b5085935050505092915050565b6000602082019050818103600083015261253981846124c1565b905092915050565b60008060006060848603121561255a57612559611c13565b5b600061256886828701611c66565b935050602084013567ffffffffffffffff81111561258957612588611c18565b5b612595868287016120cd565b925050604084013567ffffffffffffffff8111156125b6576125b5611c18565b5b6125c2868287016120cd565b9150509250925092565b600080600080608085870312156125e6576125e5611c13565b5b60006125f487828801611c66565b945050602061260587828801611c9c565b935050604061261687828801611c9c565b925050606085013567ffffffffffffffff81111561263757612636611c18565b5b6126438782880161216e565b91505092959194509250565b61265881611c3d565b82525050565b6000602082019050612673600083018461264f565b92915050565b61268281611da0565b811461268d57600080fd5b50565b60008135905061269f81612679565b92915050565b600080604083850312156126bc576126bb611c13565b5b60006126ca85828601611c66565b92505060206126db85828601612690565b9150509250929050565b600080604083850312156126fc576126fb611c13565b5b600061270a85828601611c66565b925050602061271b85828601611c66565b9150509250929050565b600080600080600060a0868803121561274157612740611c13565b5b600061274f88828901611c66565b955050602061276088828901611c66565b945050604061277188828901611c9c565b935050606061278288828901611c9c565b925050608086013567ffffffffffffffff8111156127a3576127a2611c18565b5b6127af8882890161216e565b9150509295509295909350565b6000602082840312156127d2576127d1611c13565b5b60006127e084828501611c66565b91505092915050565b60008060006060848603121561280257612801611c13565b5b600061281086828701611c66565b935050602061282186828701611c9c565b925050604061283286828701611c9c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061288357607f821691505b6020821081036128965761289561283c565b5b50919050565b60006040820190506128b1600083018561264f565b6128be602083018461264f565b9392505050565b60006040820190506128da6000830185611cf1565b6128e76020830184611cf1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261297f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612942565b6129898683612942565b95508019841693508086168417925050509392505050565b6000819050919050565b60006129c66129c16129bc84611c7b565b6129a1565b611c7b565b9050919050565b6000819050919050565b6129e0836129ab565b6129f46129ec826129cd565b84845461294f565b825550505050565b600090565b612a096129fc565b612a148184846129d7565b505050565b5b81811015612a3857612a2d600082612a01565b600181019050612a1a565b5050565b601f821115612a7d57612a4e8161291d565b612a5784612932565b81016020851015612a66578190505b612a7a612a7285612932565b830182612a19565b50505b505050565b600082821c905092915050565b6000612aa060001984600802612a82565b1980831691505092915050565b6000612ab98383612a8f565b9150826002028217905092915050565b612ad282611f92565b67ffffffffffffffff811115612aeb57612aea611df1565b5b612af5825461286b565b612b00828285612a3c565b600060209050601f831160018114612b335760008415612b21578287015190505b612b2b8582612aad565b865550612b93565b601f198416612b418661291d565b60005b82811015612b6957848901518255600182019150602085019450602081019050612b44565b86831015612b865784890151612b82601f891682612a8f565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612bc282612b9b565b612bcc8185612ba6565b9350612bdc818560208601611fae565b612be581611de0565b840191505092915050565b600060a082019050612c05600083018861264f565b612c12602083018761264f565b612c1f6040830186611cf1565b612c2c6060830185611cf1565b8181036080830152612c3e8184612bb7565b90509695505050505050565b600081519050612c5981611d47565b92915050565b600060208284031215612c7557612c74611c13565b5b6000612c8384828501612c4a565b91505092915050565b600060a082019050612ca1600083018861264f565b612cae602083018761264f565b8181036040830152612cc081866124c1565b90508181036060830152612cd481856124c1565b90508181036080830152612ce88184612bb7565b90509695505050505050565b6000608082019050612d09600083018761264f565b612d166020830186611cf1565b612d236040830185611cf1565b612d306060830184611cf1565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d7382611c7b565b9150612d7e83611c7b565b9250828201905080821115612d9657612d95612d39565b5b92915050565b60006040820190508181036000830152612db681856124c1565b90508181036020830152612dca81846124c1565b9050939250505056fea2646970667358221220472a723308d38ee06e0c1e39b4a78d8059d4017b3d70db95dfd316a5cd2d16a064736f6c63430008180033";
  public static final String FUNC_BALANCEOF = "balanceOf";
  public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";
  public static final String FUNC_BURN = "burn";
  public static final String FUNC_BURNBATCH = "burnBatch";
  public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";
  public static final String FUNC_MINT = "mint";
  public static final String FUNC_MINTBATCH = "mintBatch";
  public static final String FUNC_OWNER = "owner";
  public static final String FUNC_PAUSE = "pause";
  public static final String FUNC_PAUSED = "paused";
  public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";
  public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";
  public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";
  public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";
  public static final String FUNC_SETURI = "setURI";
  public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";
  public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";
  public static final String FUNC_UNPAUSE = "unpause";
  public static final String FUNC_URI = "uri";
  public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Bool>() {
    }));
  public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }));
  ;
  public static final Event PAUSED_EVENT = new Event("Paused",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
    }));
  ;
  public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<DynamicArray<Uint256>>() {
    }, new TypeReference<DynamicArray<Uint256>>() {
    }));
  ;
  public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }, new TypeReference<Uint256>() {
    }));
  ;
  public static final Event URI_EVENT = new Event("URI",
    Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
    }, new TypeReference<Uint256>(true) {
    }));
  ;
  public static final Event UNPAUSED_EVENT = new Event("Unpaused",
    Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
    }));
  ;
  protected static final HashMap<String, String> _addresses;
  ;
  private static String librariesLinkedBinary;
  
  static {
    _addresses = new HashMap<String, String>();
  }
  
  @Deprecated
  protected Token(String contractAddress, Web3j web3j, Credentials credentials,
                  BigInteger gasPrice, BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
  }
  
  protected Token(String contractAddress, Web3j web3j, Credentials credentials,
                  ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }
  
  @Deprecated
  protected Token(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                  BigInteger gasPrice, BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }
  
  protected Token(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                  ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
  }
  
  public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
    ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
    ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
    typedResponse.log = log;
    typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
    ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
    OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
    typedResponse.log = log;
    typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
    ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      PausedEventResponse typedResponse = new PausedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static PausedEventResponse getPausedEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
    PausedEventResponse typedResponse = new PausedEventResponse();
    typedResponse.log = log;
    typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  public static List<TransferBatchEventResponse> getTransferBatchEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
    ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
      typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferBatchEventResponse getTransferBatchEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
    TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
    typedResponse.log = log;
    typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
    typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
    return typedResponse;
  }
  
  public static List<TransferSingleEventResponse> getTransferSingleEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
    ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
      typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static TransferSingleEventResponse getTransferSingleEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
    TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
    typedResponse.log = log;
    typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
    typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
    typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
    typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
    return typedResponse;
  }
  
  public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
    ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      URIEventResponse typedResponse = new URIEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static URIEventResponse getURIEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(URI_EVENT, log);
    URIEventResponse typedResponse = new URIEventResponse();
    typedResponse.log = log;
    typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
    typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  public static List<UnpausedEventResponse> getUnpausedEvents(
    TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
    ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      UnpausedEventResponse typedResponse = new UnpausedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }
  
  public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
    Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
    UnpausedEventResponse typedResponse = new UnpausedEventResponse();
    typedResponse.log = log;
    typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
    return typedResponse;
  }
  
  @Deprecated
  public static Token load(String contractAddress, Web3j web3j, Credentials credentials,
                           BigInteger gasPrice, BigInteger gasLimit) {
    return new Token(contractAddress, web3j, credentials, gasPrice, gasLimit);
  }
  
  @Deprecated
  public static Token load(String contractAddress, Web3j web3j,
                           TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
    return new Token(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }
  
  public static Token load(String contractAddress, Web3j web3j, Credentials credentials,
                           ContractGasProvider contractGasProvider) {
    return new Token(contractAddress, web3j, credentials, contractGasProvider);
  }
  
  public static Token load(String contractAddress, Web3j web3j,
                           TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
    return new Token(contractAddress, web3j, transactionManager, contractGasProvider);
  }
  
  public static RemoteCall<Token> deploy(Web3j web3j, Credentials credentials,
                                         ContractGasProvider contractGasProvider, String initialOwner) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(initialOwner)));
    return deployRemoteCall(Token.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
  }
  
  public static RemoteCall<Token> deploy(Web3j web3j, TransactionManager transactionManager,
                                         ContractGasProvider contractGasProvider, String initialOwner) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(initialOwner)));
    return deployRemoteCall(Token.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
  }
  
  @Deprecated
  public static RemoteCall<Token> deploy(Web3j web3j, Credentials credentials,
                                         BigInteger gasPrice, BigInteger gasLimit, String initialOwner) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(initialOwner)));
    return deployRemoteCall(Token.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
  }
  
  @Deprecated
  public static RemoteCall<Token> deploy(Web3j web3j, TransactionManager transactionManager,
                                         BigInteger gasPrice, BigInteger gasLimit, String initialOwner) {
    String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(initialOwner)));
    return deployRemoteCall(Token.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
  }
  
  public static void linkLibraries(List<Contract.LinkReference> references) {
    librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
  }
  
  private static String getDeploymentBinary() {
    if (librariesLinkedBinary != null) {
      return librariesLinkedBinary;
    } else {
      return BINARY;
    }
  }
  
  public static String getPreviouslyDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }
  
  public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
  }
  
  public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
    return approvalForAllEventFlowable(filter);
  }
  
  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
    EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
  }
  
  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
    return ownershipTransferredEventFlowable(filter);
  }
  
  public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
  }
  
  public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
                                                           DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
    return pausedEventFlowable(filter);
  }
  
  public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferBatchEventFromLog(log));
  }
  
  public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
    return transferBatchEventFlowable(filter);
  }
  
  public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getTransferSingleEventFromLog(log));
  }
  
  public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(
    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
    return transferSingleEventFlowable(filter);
  }
  
  public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getURIEventFromLog(log));
  }
  
  public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock,
                                                     DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
    return uRIEventFlowable(filter);
  }
  
  public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
  }
  
  public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
                                                               DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
    return unpausedEventFlowable(filter);
  }
  
  public RemoteFunctionCall<BigInteger> call_balanceOf(String account, BigInteger id) {
    final Function function = new Function(FUNC_BALANCEOF,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
      }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_balanceOf(String account, BigInteger id) {
    final Function function = new Function(
      FUNC_BALANCEOF,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<List> call_balanceOfBatch(List<String> accounts,
                                                      List<BigInteger> ids) {
    final Function function = new Function(FUNC_BALANCEOFBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
          org.web3j.abi.datatypes.Address.class,
          org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))),
      Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
      }));
    return new RemoteFunctionCall<List>(function,
      new Callable<List>() {
        @Override
        @SuppressWarnings("unchecked")
        public List call() throws Exception {
          List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
          return convertToNative(result);
        }
      });
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_balanceOfBatch(List<String> accounts,
                                                                    List<BigInteger> ids) {
    final Function function = new Function(
      FUNC_BALANCEOFBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
          org.web3j.abi.datatypes.Address.class,
          org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_burn(String account, BigInteger id,
                                                          BigInteger value) {
    final Function function = new Function(
      FUNC_BURN,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(value)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_burnBatch(String account,
                                                               List<BigInteger> ids, List<BigInteger> values) {
    final Function function = new Function(
      FUNC_BURNBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class))),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Boolean> call_isApprovedForAll(String account, String operator) {
    final Function function = new Function(FUNC_ISAPPROVEDFORALL,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.Address(operator)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
      }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_isApprovedForAll(String account,
                                                                      String operator) {
    final Function function = new Function(
      FUNC_ISAPPROVEDFORALL,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.Address(operator)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_mint(String account, BigInteger id,
                                                          BigInteger amount, byte[] data) {
    final Function function = new Function(
      FUNC_MINT,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(amount),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_mintBatch(String to, List<BigInteger> ids,
                                                               List<BigInteger> amounts, byte[] data) {
    final Function function = new Function(
      FUNC_MINTBATCH,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<String> call_owner() {
    final Function function = new Function(FUNC_OWNER,
      Arrays.<Type>asList(),
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
      }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_owner() {
    final Function function = new Function(
      FUNC_OWNER,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_pause() {
    final Function function = new Function(
      FUNC_PAUSE,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Boolean> call_paused() {
    final Function function = new Function(FUNC_PAUSED,
      Arrays.<Type>asList(),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
      }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_paused() {
    final Function function = new Function(
      FUNC_PAUSED,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_renounceOwnership() {
    final Function function = new Function(
      FUNC_RENOUNCEOWNERSHIP,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_safeBatchTransferFrom(String from, String to,
                                                                           List<BigInteger> ids, List<BigInteger> values, byte[] data) {
    final Function function = new Function(
      FUNC_SAFEBATCHTRANSFERFROM,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
        new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
          org.web3j.abi.datatypes.generated.Uint256.class,
          org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_safeTransferFrom(String from, String to,
                                                                      BigInteger id, BigInteger value, byte[] data) {
    final Function function = new Function(
      FUNC_SAFETRANSFERFROM,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
        new org.web3j.abi.datatypes.Address(to),
        new org.web3j.abi.datatypes.generated.Uint256(id),
        new org.web3j.abi.datatypes.generated.Uint256(value),
        new org.web3j.abi.datatypes.DynamicBytes(data)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_setApprovalForAll(String operator,
                                                                       Boolean approved) {
    final Function function = new Function(
      FUNC_SETAPPROVALFORALL,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator),
        new org.web3j.abi.datatypes.Bool(approved)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_setURI(String newuri) {
    final Function function = new Function(
      FUNC_SETURI,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newuri)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<Boolean> call_supportsInterface(byte[] interfaceId) {
    final Function function = new Function(FUNC_SUPPORTSINTERFACE,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
      }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_supportsInterface(byte[] interfaceId) {
    final Function function = new Function(
      FUNC_SUPPORTSINTERFACE,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_transferOwnership(String newOwner) {
    final Function function = new Function(
      FUNC_TRANSFEROWNERSHIP,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_unpause() {
    final Function function = new Function(
      FUNC_UNPAUSE,
      Arrays.<Type>asList(),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  public RemoteFunctionCall<String> call_uri(BigInteger param0) {
    final Function function = new Function(FUNC_URI,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
      Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
      }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }
  
  public RemoteFunctionCall<TransactionReceipt> send_uri(BigInteger param0) {
    final Function function = new Function(
      FUNC_URI,
      Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
      Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }
  
  protected String getStaticDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }
  
  public static class ApprovalForAllEventResponse extends BaseEventResponse {
    public String account;
    
    public String operator;
    
    public Boolean approved;
  }
  
  public static class OwnershipTransferredEventResponse extends BaseEventResponse {
    public String previousOwner;
    
    public String newOwner;
  }
  
  public static class PausedEventResponse extends BaseEventResponse {
    public String account;
  }
  
  public static class TransferBatchEventResponse extends BaseEventResponse {
    public String operator;
    
    public String from;
    
    public String to;
    
    public List<BigInteger> ids;
    
    public List<BigInteger> values;
  }
  
  public static class TransferSingleEventResponse extends BaseEventResponse {
    public String operator;
    
    public String from;
    
    public String to;
    
    public BigInteger id;
    
    public BigInteger value;
  }
  
  public static class URIEventResponse extends BaseEventResponse {
    public BigInteger id;
    
    public String value;
  }
  
  public static class UnpausedEventResponse extends BaseEventResponse {
    public String account;
  }
}
